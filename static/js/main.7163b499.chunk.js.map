{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["Container","styled","div","_templateObject","Header","h2","_templateObject2","Table","table","_templateObject3","App","_useState","useState","_useState2","Object","slicedToArray","timetable","setTimetable","useEffect","subjectNumbers","Array","from","keys","map","number","timetableGenerator","times","i","length","days","subject","exceptedDay","Math","floor","random","randomTime","randomClassroom","dayA","dayB","console","log","react_default","a","createElement","className","body","day","index","header","row","rowIdx","key","concat","col","colIdx","classroom","idx","renderTimetalbe","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7163b499.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  width: 100px;\n`;\n\nconst Header = styled.h2`\n  text-align: left;\n  margin: 0.5rem 0;\n  padding: 0;\n`;\n\nconst Table = styled.table`\n  border-collapse: collapse;\n  border: 1px solid black;\n\n  tr {\n    border: 1px solid black;\n  }\n\n  td {\n    border: 1px solid black;\n  }\n`;\n\nconst App: React.FC = () => {\n  const [timetable, setTimetable] = useState<any[]>([]);\n\n  useEffect(() => {\n    // 1~90 번호 생성기\n    const subjectNumbers = Array.from(Array(90).keys()).map(\n      (number) => number + 1\n    );\n    const timetableGenerator = () => {\n      // 빈 배열 생성기 -> 할당되지 않은 과목번호는 0\n      const times = new Array(7);\n      for (let i = 0; i < times.length; i++) {\n        times[i] = Array.from(new Array(10)).map(() => 0);\n      }\n      return times;\n    };\n\n    // 요일 number\n    // 월: 0 화: 1 수: 2 목: 3 금: 4\n    const days = Array.from(Array(5));\n    for (let i = 0; i < days.length; i++) {\n      days[i] = timetableGenerator();\n    }\n\n    // 메인 로직\n    subjectNumbers.map((subject) => {\n      // 과목번호가 1~60\n      if (subject <= 60) {\n        // 4번 반복이니, 월화수목금 5일 중 4개를 뽑는 것보다 제외할 요일 하나를 뽑는다.\n        const exceptedDay = Math.floor(Math.random() * 5);\n        for (let i = 0; i < days.length; i++) {\n          if (i !== exceptedDay) {\n            while (true) {\n              // 시간과 교실번호를 뽑는다.\n              const randomTime = Math.floor(Math.random() * 7);\n              const randomClassroom = Math.floor(Math.random() * 10);\n              if (days[i][randomTime][randomClassroom] === 0) {\n                // 해당 칸이 비어있을 경우에만 넣는다.\n                days[i][randomTime][randomClassroom] = subject;\n                break;\n              }\n            }\n          }\n        }\n        // 과목번호가 61~90\n      } else if (subject > 61) {\n        let dayA;\n        let dayB;\n        while (true) {\n          dayA = Math.floor(Math.random() * 5);\n          dayB = Math.floor(Math.random() * 5);\n          if (dayA !== dayB) {\n            break;\n          }\n        }\n\n        while (true) {\n          const randomTime = Math.floor(Math.random() * 7);\n          const randomClassroom = Math.floor(Math.random() * 10);\n          if (days[dayA][randomTime][randomClassroom] === 0) {\n            days[dayA][randomTime][randomClassroom] = subject;\n            break;\n          }\n        }\n\n        while (true) {\n          const randomTime = Math.floor(Math.random() * 7);\n          const randomClassroom = Math.floor(Math.random() * 10);\n          if (days[dayB][randomTime][randomClassroom] === 0) {\n            days[dayB][randomTime][randomClassroom] = subject;\n            break;\n          }\n        }\n      }\n    });\n\n    setTimetable(days);\n    console.log(days);\n  }, []);\n\n  const renderTimetalbe = (days: any[]) => {\n    const body = days.map((day, index) => {\n      let header = \"\";\n      switch (index) {\n        case 0: {\n          header = \"월요일\";\n          break;\n        }\n        case 1: {\n          header = \"화요일\";\n          break;\n        }\n        case 2: {\n          header = \"수요일\";\n          break;\n        }\n        case 3: {\n          header = \"목요일\";\n          break;\n        }\n        case 4: {\n          header = \"금요일\";\n          break;\n        }\n      }\n\n      console.log(\"no.  |\\t1\\t2\\t3\\t4\\t5\\t6\\t7\\t8\\t9\\t10\");\n      console.log(\n        \"----------------------------------------------------------------------------------\"\n      );\n      const body = days[index].map((row: any, rowIdx: number) => {\n        return (\n          <tr key={`${row}_${index}`}>\n            <td>{rowIdx + 1}.</td>\n            {row.map((col: any, colIdx: number) => (\n              <td key={colIdx}>{row[colIdx]}</td>\n            ))}\n          </tr>\n        );\n      });\n      return (\n        <Container key={index}>\n          <Header>{header}</Header>\n          <Table>\n            <thead>\n              <tr>\n                <td />\n                {Array.from(Array(10)).map((classroom, idx) => (\n                  <td key={idx}>{idx + 1}</td>\n                ))}\n              </tr>\n            </thead>\n            <tbody>{body}</tbody>\n          </Table>\n        </Container>\n      );\n    });\n\n    return <div>{body}</div>;\n  };\n\n  return <div className='App'>{renderTimetalbe(timetable)}</div>;\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}